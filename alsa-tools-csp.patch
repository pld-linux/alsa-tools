--- alsa-tools-1.0.12/sb16_csp/cspctl.c.orig	2006-08-22 20:25:53.000000000 +0200
+++ alsa-tools-1.0.12/sb16_csp/cspctl.c	2006-08-26 16:04:02.621408500 +0200
@@ -42,7 +42,7 @@
 
 int card = 0;
 
-static void error(const char *fmt,...)
+static void csp_error(const char *fmt,...)
 {
 	va_list va;
 
@@ -78,7 +78,7 @@
 
 	/* open CSP hwdep device */
 	if ((err = snd_hwdep_open(&handle, name, O_WRONLY)) < 0) {
-		error("CSP open (%i-%i): %s", idx, dev, snd_strerror(err));
+		csp_error("CSP open (%i-%i): %s", idx, dev, snd_strerror(err));
 		exit(1);
 	}
 
@@ -91,21 +91,21 @@
 		}
 		/* read microcode to buffer */
 		if (read(fd, &microcode.data, sizeof(microcode.data)) < 0) {
-			error("%s: read error", filename);
+			csp_error("%s: read error", filename);
 			exit(1);
 		}
 		close(fd);
 
 		/* load microcode to CSP */
 		if (snd_hwdep_ioctl(handle, SNDRV_SB_CSP_IOCTL_LOAD_CODE, &microcode) < 0) {
-			error("unable to load microcode");
+			csp_error("unable to load microcode");
 			exit(1);
 		}
 		break;
 	case COMMAND_UNLOAD:
 		/* unload microcode from CSP */
 		if (snd_hwdep_ioctl(handle, SNDRV_SB_CSP_IOCTL_UNLOAD_CODE, NULL) < 0) {
-			error("unable to unload microcode");
+			csp_error("unable to unload microcode");
 			exit(1);
 		}
 	}
@@ -145,7 +145,7 @@
 			{
 				card = snd_card_get_index(optarg);
 				if (card < 0 || card > 31) {
-					error ("wrong -c argument '%s'\n", optarg);
+					csp_error ("wrong -c argument '%s'\n", optarg);
 					return 1;
 				}
 			}
@@ -153,14 +153,14 @@
 		case 'f':
 			microcode.info.func_req = atoi(optarg);
 			if ((microcode.info.func_req < 1) || (microcode.info.func_req > 4)) {
-				error("value %i for function number is invalid",
+				csp_error("value %i for function number is invalid",
 				      microcode.info.func_req);
 				return 1;
 			}
 			break;
 		case 'd':
 			if (strlen(optarg) > 16) {
-				error("codec description '%s' too long", optarg);
+				csp_error("codec description '%s' too long", optarg);
 				return 1;
 			}
 			strcpy(microcode.info.codec_name, optarg);
@@ -170,7 +170,7 @@
 		}
 	}
 	if (optind >= argc) {
-		error("please specify command");
+		csp_error("please specify command");
 		return 1;
 	}
 	if (!strcmp (argv[optind], "load")) {
@@ -178,32 +178,32 @@
 	} else if (!strcmp (argv[optind], "unload")) {
 	     command = COMMAND_UNLOAD;
 	} else {
-		error ("command should be either 'load' or 'unload'");
+		csp_error ("command should be either 'load' or 'unload'");
 		return 1;
 	}
 
 	if ((command == COMMAND_LOAD) && (++optind >= argc)) {
-		error ("missing microcode filename");
+		csp_error ("missing microcode filename");
 		return 1;
 	}
 
 	// Get control handle for selected card
 	sprintf(card_id, "hw:%i", card);
 	if ((err = snd_ctl_open(&ctl_handle, card_id, 0)) < 0) {
-		error("control open (%s): %s", card_id, snd_strerror(err));
+		csp_error("control open (%s): %s", card_id, snd_strerror(err));
 		return 1;
 	}
 
 	// Read control hardware info from card
 	if ((err = snd_ctl_card_info(ctl_handle, card_info)) < 0) {
-		error("control hardware info (%s): %s", card_id, snd_strerror(err));
+		csp_error("control hardware info (%s): %s", card_id, snd_strerror(err));
 		exit(1);
 	}
 
 	// CSP chip is present only on SB16 and SB AWE cards
 	if (strcmp(snd_ctl_card_info_get_driver(card_info), "SB16") != 0 &&
 	    strcmp(snd_ctl_card_info_get_driver(card_info), "SB AWE") != 0) {
-		error("not a SB16 or SB AWE type card");
+		csp_error("not a SB16 or SB AWE type card");
 		exit(1);
 	}
 
@@ -212,13 +212,13 @@
 	err = 1;
 	while (1) {
 		if (snd_ctl_hwdep_next_device(ctl_handle, &dev) < 0)
-			error("hwdep next device (%s): %s", card_id, snd_strerror(err));
+			csp_error("hwdep next device (%s): %s", card_id, snd_strerror(err));
 		if (dev < 0)
 			break;
 		snd_hwdep_info_set_device(hwdep_info, dev);
 		if (snd_ctl_hwdep_info(ctl_handle, hwdep_info) < 0) {
 			if (err != -ENOENT)
-				error("control hwdep info (%s): %s", card_id, snd_strerror(err));
+				csp_error("control hwdep info (%s): %s", card_id, snd_strerror(err));
 			continue;
 		}
 		if (snd_hwdep_info_get_iface(hwdep_info) == SND_HWDEP_IFACE_SB16CSP) {
@@ -227,7 +227,7 @@
 		}
 	}
 	if (err)
-		error("no CSP device present");
+		csp_error("no CSP device present");
 
 	snd_ctl_close(ctl_handle);
 	return 0;
